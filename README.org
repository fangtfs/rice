#+title: PEW - Peromage's Emacs Workspace
#+author: Peromage

#+begin_quote
A minimalist's Emacs configuration.
#+end_quote

* About
This is my personal Emacs configuration.  Be aware that it might not fit your needs.

This configuration intends to be as minimal as possible so it prioritizes using Emacs built-in functionalities.

For convenience, I've included my [[https://github.com/peromage/rice][personal configuration collection]] in [[./rice][rice]] directory which is synchronized regularly via =git subtree=.

The file structure was borrowed from [[https://github.com/purcell/emacs.d][Steve Purcell]]'s Emacs configuration.

* Features
- Lightweight and modular
- Respect vanilla Emacs keybindings (=evil-mode= only enabled in editing buffers)
- Terminal friendly
- Emacs 28+ only

* Get started
** Option 1 -- Clone to ~/.emacs.d
This is the traditional way to use this configuration.  Simply clone this repo to =~/.emacs.d=.

#+begin_src sh
git clone https://github.com/peromage/pew.git ~/.emacs.d
#+end_src

** Option 2 -- Clone to somewhere else
This configuration also supports loading from non-canonical path.

#+begin_src sh
git clone https://github.com/peromage/pew.git ~/pew
#+end_src

While in the =.emacs= or =~/.emacs.d/init.el=,

#+begin_src elisp
(load-file "~/pew/init.el")
#+end_src

** Local configuration files
There are two local configuration files which are not tracked by default.

- =early-custom.el=: This file is loaded before any other configurations.  Can be used to override some configuration variables.

- =custom.el= (or =custom-mini.el= if ~pew::mini-init~ is non-nil): This file is loaded at the last and it contains all the saved customization from ~customize~ interface.  Settings that is not intended to be tracked can be put here.

* pewcfg
I developed this macro based on my personal preference to configure independently to ~use-package~.

Here is a list of keywords.

| Keyword       | Description                                                           |
|---------------+-----------------------------------------------------------------------|
| ~:custom~     | Set variable values that can be configured with custom interface.     |
| ~:map~        | Set key bindings in a new map.                                        |
| ~:bind~       | Set key bindings in an existing map.                                  |
| ~:transient~  | Similar with :map but also define a command to trigger transient map. |
| ~:switch~     | Define a command to toggle variable values.                           |
| ~:face~       | Set face attributes.                                                  |
| ~:property~   | Set variable properties.                                              |
| ~:hook~       | Set hook functions.                                                   |
| ~:automode~   | Set auto mode triggers.                                               |
| ~:eval~       | Evaluate forms.                                                       |
| ~:eval-after~ | Evaluate forms after the feature is loaded.                           |

See [[./pew/lisp/init-pewcfg.el][code]] and [[./pew/lisp/init-defaults.el][example]].

* Key bindings
** Major keybindings
~evil-mode~ is enabled for editing buffers and outside of it the key bindings are kept in a vanilla fashion.

In ~evil-mode~ the =SPC= is bound to ~pewkey-map~ where my personal key bindings go.

This keymap can be activated via ~pewkey~ command as well.  When it is activated, ~pewkey-map~ becomes a transient map and exits after any command invoked in it.

~pewkey~ supports repeat mode.  Unlike ~repeat-mode~ it is still a transient keymap.  A universal argument can be passed to ~pewkey~ to enable repeat mode or press ~C-h~ to enable it while ~pewkey-map~ is active.  Use ~C-g~ to exit.

Some of the meta bindings are replaced and reserved for my personal use.  They are bound with prefix command keymaps.  See [[./pew/lisp/init-defaults.el][init-default.el]] for details.

My personal key bindings mostly are bound in ~pewkey-map~. It can be activated by ~pewkey~.

** A brief list of keybindings
Global

| Key         | Command                                                    | Definition                                       |
|-------------+------------------------------------------------------------+--------------------------------------------------|
| =M-c=       | ~pewkey~                                                   | [[./pew/lisp/init-defaults.el][init-default.el]] |
| =C-u M-c=   | ~pewkey-repeat~                                            | [[./pew/lisp/init-defaults.el][init-default.el]] |
| =C-x b=     | Mini@@html:<b>@@B@@html:</b>@@uffer by ~consult~           | [[./pew/lisp/elpa-vertico.el][elpa-vertico.el]]  |
| =C-x g=     | Rip@@html:<b>@@G@@html:</b>@@rip by ~consult~              | [[./pew/lisp/elpa-vertico.el][elpa-vertico.el]]  |
| =C-c l ...= | @@html:<b>@@L@@html:</b>@@SP by ~lsp-mode~                 | [[./pew/lisp/elpa-lsp.el][elpa-lsp.el]]          |
| =M-z g ...= | @@html:<b>@@G@@html:</b>@@it by ~magit~                    | [[./pew/lisp/elpa-git.el][elpa-git.el]]          |
| =M-z w=     | Jump @@html:<b>@@W@@html:</b>@@indow by ~ace-window~       | [[./pew/lisp/elpa-utils.el][elpa-utils.el]]      |
| =M-z f=     | @@html:<b>@@F@@html:</b>@@ind character by ~avy-goto-char~ | [[./pew/lisp/elpa-utils.el][elpa-utils.el]]      |
| =M-z j=     | @@html:<b>@@J@@html:</b>@@ump to line by ~avy-goto-line~   | [[./pew/lisp/elpa-utils.el][elpa-utils.el]]      |
| =M-z '=     | Separate edit by ~separedit~                               | [[./pew/lisp/elpa-utils.el][elpa-utils.el]]      |

Evil

| Key (normal and visual state) | Command      |
|-------------------------------+--------------|
| =\=                           | Leader       |
| N/A                           | Local leader |
| =SPC=                         | ~pewkey~     |

See [[./pew/lisp/elpa-evil.el][elpa-evil.el]] for Evil bindings.

** Available key prefixes
The following key prefixes are cleared and available for binding since they are less used in general.  The original bindings can be accessed in ~pewkey-map~.

| Prefix | Map            |
|--------+----------------|
| =M-o=  | ~pew::M-o-map~ |
| =M-t=  | ~pew::M-t-map~ |
| =M-c=  | ~pew::M-c-map~ |
| =M-u=  | ~pew::M-u-map~ |
| =M-l=  | ~pew::M-l-map~ |
| =M-z=  | ~pew::M-z-map~ |
| =M-q=  | ~pew::M-q-map~ |
| =M-h=  | ~pew::M-h-map~ |

* Misc - some conventions
** Naming conventions
Personally I don't like the Emacs traditional naming which prepends package name with =-=.  I prefer using =::= because it divides namespace and symbol name in a more visual appealing way.

Also to distinguish local variables better, I use prefix =l:= for ~let~ bound variables and =ql:= for ~let~ bound variables in macros expansion.

There are a lot discussions about ELisp naming convention.  Xah Lee had a pretty reasonable one here: [[http://xahlee.info/emacs/misc/elisp_naming_convention.html][discussion]].

The [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Shorthands.html][shorthands]] is a good practice to simplify naming things, too.

** use-package keyword order
No strict order but I prefer to put ~:custom~ ~:init~ and ~:config~ at the end of declaration in this order, since they consist of the most part of a package configuration.

* Acknowledgment
This configuration is inspired by

- [[https://github.com/purcell/emacs.d][purcell/emacs.d]]
- [[https://github.com/protesilaos/dotfiles][protesilaos/dotfiles]]
- [[https://github.com/condy0919/.emacs.d][condy0919/.emacs.d]]
