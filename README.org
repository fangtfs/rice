* PEW - Peromage's Emacs Workbench

#+begin_quote
A minimalist's Emacs configuration.
#+end_quote

This is my personal Emacs configuration. Be aware that it might not fit your needs.

This configuration intends to be as minimal as possible. It also prioritize using Emacs built-in functionalities.

Additionally for convenience, I included my personal configuration collection for other apps in this repo. They can be found in [[./rice][rice]] directory which is managed by ~git subtree~.

** Features
- Light and quick
- Terminal friendly
- Respect Emacs vanilla key bindings
- Evil mode (~evil-motion-state~ and ~evil-emacs-state~ are used out side of editing buffers)
- Vertico and its complementary packages (Utilize Emacs built-in completion)
- LSP support

** Get Started
Clone this repo and put it to your home directory with folder name =.emacs.d=.

#+begin_src shell
$ git clone https://github.com/peromage/pew.git ~/.emacs.d
#+end_src

Then Emacs will automatically install everything for you.

*** Local Files
Disposable changes can go into =local.el= including settings from ~customize~.

=local.el= will be applied on top of the default pew configuration.

*** List of files and directories

#+begin_example
pew
├── lisp/                   # Configuration files
├── site-lisp/              # Addtional package files written by myself
├── yasnippets/             # Snippet files loaded by yasnippet
├── rice/                   # My config collection for other apps
├── tests/                  # Test scripts
├── early-init.el           # Init file loaded before init.el
├── init.el                 # Main init file
├── .pew                    # Configuration root placeholder
├── .gitignore              # Git ignore file
├── LICENSE                 # License file
└── README.md               # This file
#+end_example

** Key Bindings
*** Emacs State
To respect Emacs key bindings, there are only a few modification on the original ones. Most of them are just enhancement without changing the meanings.

For the personal key bindings, they are defined in a transient map by calling either =pewkey= or =pewkey-repeat=.

See [[./lisp/init-defaults.el][init-default.el]]

*** Evil Mode
Evil key bindings are defined with leader key =SPC=. There are not too many. Most of Vim bindings are good enough.

See [[./lisp/elpa-evil.el][elpa-evil.el]]

*** Principles
When binding keys I follow these principles to make them mnemonic.

| Key | Meaning                   |
|-----+---------------------------|
| q   | Quit; Close window        |
| Q   | Quit; Close all           |
| s   | Split horizontally        |
| v   | Split vertically          |
| t   | New tab                   |
| w   | Write file                |
|-----+---------------------------|
| h   | Move focus left           |
| j   | Move focus down           |
| k   | Move focus up             |
| l   | Move focus right          |
| m   | Move tab forward          |
| M   | Move tab backward         |
| f   | Move tab focus forward    |
| b   | Move tab focus backward   |
| n   | Switch to next buffer     |
| p   | Switch to previous buffer |
| u   | Undo                      |
| r   | Redo                      |

** Philosophy
*** Consideration of design
The idea of modular structure was borrowed from [[https://github.com/purcell/emacs.d][Steve Purcell]]'s Emacs configuration. But when I write my own files I keep these points in mind:

1. Keep simple and minimal
I don't want to make my Emacs become some sort of IDE monster so main focus is the speed. When try keeping a minimal number of packages I use [[https://github.com/jwiegley/use-package][use-package]] to lazily load most them so the start up time should be fast. Meanwhile starting from Emacs 28, most of the built-in package is good enough like =flymake= =project= and built-in completion. They can handle my daily work well without problems.

2. Keep modular
Each modular doesn't have cross references to each other so any of them can be plugged in and out at any time (except for the =init-common= which is a common library).

If there is no Internet to download packages it's possible to keep =init-common= and =init-default= only in =init.el= to enhance vanilla Emacs experience.

*** Literal configuration?
No.

Literal programming is a fantastic idea. However, I found that it's a distraction when I read my configuration code because I don't need to explain what I thought to myself.

In general, I believe proper comments left in the code could improve readability good enough. Also this configuration is designed in a modular way where each module is descriptive by its name, and comments are also sectioned with outline format, so browsing and modifying the configuration should be with ease.

Also literal configuration is a bit hard to debug and test since it has to be tangled each time it's updated. Hook might be a solution but undeniably it still requires additional setup for the first time. In my concept, day-to-day productivity tool configuration should be ready out of the box.

Don't forget that in the modular configuration tool packages can be added anytime under =site-list= directory. It might be a hassle for literal configuration with everything in one file.

In one word, when it comes to sharing and note taking, literal programming is a perfect way to do it but for daily tools configuration files are easier to use.

** Acknowledgement
This configuration is inspired by
- [[https://github.com/purcell/emacs.d][purcell/emacs.d]]
- [[https://protesilaos.com/emacs/dotemacs][Protesilaos Stavrou]]
- [[https://github.com/condy0919/.emacs.d][condy0919/.emacs.d]]
