* PEW - Peromage's Emacs Workbench

#+begin_quote
A minimalist's Emacs configuration.
#+end_quote

This is my personal Emacs configuration.  Be aware that it might not fit your needs.

This configuration intends to be as minimal as possible.  It also prioritize using Emacs built-in functionalities.

Additionally for convenience, I included my personal configuration collection for other apps in this repo.  They can be found in [[./rice][rice]] directory which is managed by ~git subtree~.

** Features
- Light and quick
- Terminal friendly
- Respect Emacs vanilla key bindings
- Evil mode (~evil-motion-state~ and ~evil-emacs-state~ are used out side of editing buffers)
- Vertico and its complementary packages (Utilize Emacs built-in completion)
- LSP support
- For Emacs 28+ only

** Get Started
Clone this repo and put it to your home directory with folder name =.emacs.d=.

#+begin_src shell
$ git clone https://github.com/peromage/pew.git ~/.emacs.d
#+end_src

Then Emacs will automatically install everything for you.

*** Local Files
Disposable changes can go into =local.el= including settings from ~customize~.

=local.el= will be applied on top of the default pew configuration.

*** List of files and directories

#+begin_example
pew
├── lisp/                   # Configuration files
├── site-lisp/              # Addtional package files written by myself
├── yasnippets/             # Snippet files loaded by yasnippet
├── rice/                   # My config collection for other apps
├── tests/                  # Test scripts
├── early-init.el           # Init file loaded before init.el
├── init.el                 # Main init file
├── .pew                    # Configuration root placeholder
├── .gitignore              # Git ignore file
├── LICENSE                 # License file
└── README.md               # This file
#+end_example

** Key Bindings
*** Emacs State
To respect Emacs key bindings, there are only a few modification on the original ones.  Most of them are just enhancement without changing the meanings.

For the personal key bindings, they are defined in a transient map by calling either =pewkey= or =pewkey-repeat=.

See [[./lisp/init-defaults.el][init-default.el]]

*** Evil Mode
Evil key bindings are defined with leader key =SPC=.  There are not too many.  Most of Vim bindings are good enough.

See [[./lisp/elpa-evil.el][elpa-evil.el]]

*** Principles
When binding keys I follow these principles to make them mnemonic.

| Key | Meaning                   |
|-----+---------------------------|
| q   | Quit; Close window        |
| Q   | Quit; Close all           |
| s   | Split horizontally        |
| v   | Split vertically          |
| t   | New tab                   |
| w   | Write file                |
|-----+---------------------------|
| h   | Move focus left           |
| j   | Move focus down           |
| k   | Move focus up             |
| l   | Move focus right          |
| m   | Move tab forward          |
| M   | Move tab backward         |
| f   | Move tab focus forward    |
| b   | Move tab focus backward   |
| n   | Switch to next buffer     |
| p   | Switch to previous buffer |
| u   | Undo (actions)            |
| r   | Redo (actions)            |

** Philosophy
*** Consideration of design
The idea of modular structure was borrowed from [[https://github.com/purcell/emacs.d][Steve Purcell]]'s Emacs configuration.  But when I write my own files I keep these points in mind:

1. Keep it simple and minimal
I don't want to make my Emacs become some sort of IDE monster so the main focus is the speed.  When try keeping a minimal number of packages I use [[https://github.com/jwiegley/use-package][use-package]] to lazily load most them.  Meanwhile starting from Emacs 28, most of the built-in package is good enough like =flymake= =project= and the built-in completion.  They can handle my daily work well without problems.

2. Keep it modular
Each module doesn't have cross references to each other so any one of them can be plugged in and out at any time (except for the =init-common= which is a common library used by other modules).

If there is no Internet to download packages it's possible to keep only =init-common= and =init-default= in =init.el= to bring some sweet stuff to vanilla Emacs.

*** Literal configuration?
No.  A short answer is it's not my style.

Don't give me wrong.  I'm an Org user and I use =ox-hugo= to manage my blog articles.  I've heard a lot people talking about literal configuration and how good it is then I gave it a try, but it didn't work well for me.

First thing is, when writing configuration in Org file the, the main focus has changed.  Usually code is the first class citizen and commentary text comes after it.  But in literal configuration they are put in the opposite position.  When I browse my code, my focus got constantly broken because I have to skip the text and find the next code block in most times.  Some people may argue using keybindings to jump between code blocks but I'm talking about visual and feeling here.

Then I found coding in the code block is kind of awkward since the completion doesn't work well and you have to use a special buffer to edit the code.

Besides the editing, adding a third party package into my configuration feels strange.  Since all of my configuration code is in an Org file, does that mean I have to put other's code into my Org file too because now it's a part of my configurations?  What if the package has multiple files?  People may say "Well you don't have to.  Just copy and paste in it's module files.  If that's true, you then just went against the belief that using one Org file to manage personal configuration.  If you break the Org file into pieces and what's the difference if I use the traditional and modular way?

As of sectioning, I can use =outline-minor-mode= with proper comments to achieve the same effect.

Tangling and speed is not a problem since you can always tangle into a single init file and byte compile it but when it comes to debug, it's not very efficient.

Overall, I like =org-mode= and I use it for my blog and documentation but not for my daily driver's configuration.

** Acknowledgement
This configuration is inspired by
- [[https://github.com/purcell/emacs.d][purcell/emacs.d]]
- [[https://github.com/protesilaos/dotfiles][protesilaos/dotfiles]]
- [[https://github.com/condy0919/.emacs.d][condy0919/.emacs.d]]
